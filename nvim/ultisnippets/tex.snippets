global !p
import os

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'


def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and x != '0'


endglobal


snippet lorem "lorem ipsum" b
Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
$0
endsnippet

context "math()"
snippet abs "\left| \right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet sec "Hruled \section{}" b
\section{$1}
$0
endsnippet

snippet sub "\subsection{}" b
\subsection{$1}
$0
endsnippet

snippet ssub "\subsubsection{}" b
\subsubsection{$1}
$0
endsnippet

snippet chap "\chapter{}" b
\chapter{$1}
\hrule
\vspace{40pt}
$0
endsnippet

snippet bf "\textbf{}" i
\textbf{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet bf "\bm{}" iA
\bm{${1:${VISUAL}}}$0
endsnippet


snippet it "\textit{}" i
\textit{${1:${VISUAL}}}$0
endsnippet

snippet box "Black box" b
\\begin{blackbox}
	\textbf{$1}
	${0:${VISUAL}}
\\end{blackbox}
endsnippet

snippet lem "Lemma" bA
\\begin{blackbox}
	\textbf{Lemma: $1} \\\\
	${0:${VISUAL}}
\\end{blackbox}
endsnippet

snippet prop "Proposition" bA
\\begin{blackbox}
	\textbf{Proposition: $1} \\\\
	${0:${VISUAL}}
\\end{blackbox}
endsnippet

snippet theo "Theorem" bA
\\begin{blackbox}
	\textbf{Theorem: $1} \\\\
	${0:${VISUAL}}
\\end{blackbox}
endsnippet

snippet defi "Definition" bA
\\begin{blackbox}
	\textbf{Definition: $1} \\\\
	${0:${VISUAL}}
\\end{blackbox}
endsnippet


snippet temp "template document" b
\documentclass[a4paper]{article}
%Use package definitions
\usepackage[margin=1.3in]{geometry}
\usepackage{amsmath, amssymb, bm}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{cmbright} % Delete this to change the font back to default LaTeX font.
\usepackage{textcomp}
\usepackage{amsmath, amssymb}
\usepackage{pdfpages}
\usepackage{centernot}
\usepackage{transparent}
\usepackage{varwidth}
\usepackage{xcolor}
\usepackage[most]{tcolorbox}
\usepackage{fancyhdr}

%Creating a new color box
\newtcolorbox{blackbox}[1][]{colframe=black,colback=white,sharp corners,center,#1}

%Creating the title
\title{$1: $2\author{$3}\date{\today}}

%Creating the header
\pagestyle{fancy}
\fancyhead[L]{$4}
\fancyhead[R]{\today}
\setlength{\headheight}{14pt} % Fixes headheight warnings when using cmbright

\begin{document}
\maketitle
%Header on title page
\thispagestyle{fancy} 
$0
    
\end{document}
endsnippet


snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[htpb]
	\centering
	\includegraphics[width=0.8\textwidth]{$1}
	\caption{$2}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet usepackage "Package" bA
\usepackage[${1:options}]{${2:package}}$0
endsnippet


#--------------------------------- MATHS SNIPPETS ----------------------------

# Greek Symbols
context "math()"
snippet alp "\alpha" iA
\alpha$0
endsnippet

priority 10000
context "math()"
snippet ome "\omega" iA
\omega$0
endsnippet

priority 10000
context "math()"
snippet Ome "\Omega" iA
\Omega$0
endsnippet

context "math()"
snippet bet "\beta" iA
\beta$0
endsnippet

context "math()"
snippet Bet "\Beta" iA
\Beta$0
endsnippet

context "math()"
snippet gam "\gamma" iA
\gamma$0
endsnippet

context "math()"
snippet Gam "\Gamma" iA
\Gamma$0
endsnippet

context "math()"
snippet del "\delta" iA
\delta$0
endsnippet

context "math()"
snippet Del "\Delta" iA
\Delta$0
endsnippet

context "math()"
snippet eps "\epsilon" iA
\epsilon$0
endsnippet

priority 10000
context "math()"
snippet zet "\zeta" iA
\zeta$0
endsnippet

context "math()"
snippet Zet "\zeta" iA
\Zeta$0
endsnippet

context "math()"
snippet eta "\eta" A
\eta$0
endsnippet

context "math()"
snippet thet "\theta" iA
\theta$0
endsnippet

context "math()"
snippet tt "\bm{\theta}" iA
\bm{\theta}$0
endsnippet

context "math()"
snippet Thet "\Theta" iA
\Theta$0
endsnippet

context "math()"
snippet lam "\lambda" iA
\lambda$0
endsnippet

context "math()"
snippet Lam "\Lambda" i
\Lambda$0
endsnippet

context "math()"
snippet mu "\mu" iA
\mu$0
endsnippet

context "math()"
snippet pi "\pi" iA
\pi$0
endsnippet

context "math()"
snippet sig "\sigma" iA
\sigma$0
endsnippet

context "math()"
snippet Sig "\Sigma" iA
\Sigma$0
endsnippet

context "math()"
snippet rho "\rho" iA
\rho$0
endsnippet

context "math()"
snippet phi "\phi" iA
\phi$0
endsnippet

context "math()"
snippet Phi "\Phi" iA
\Phi$0
endsnippet

context "math()"
snippet psi "\psi" iA
\psi$0
endsnippet

context "math()"
snippet Psi "\Psi" iA
\Psi$0
endsnippet

context "math()"
snippet Eps "\Epsilon" iA
\Epsilon$0
endsnippet

context "math()"
snippet abs "\left| \right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet


context "math()"
snippet mod "modulus" iA
\lVert ${1:${VISUAL}} \rVert $0
endsnippet


context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet there "implies" Aiw
\therefore $0
endsnippet

context "math()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet ii "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${0:${VISUAL}}
.\]
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet pmat "pmat" A
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" A
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet lr() "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{} "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet langle "\langle \rangle" iA
\langle $1 \rangle$0
endsnippet

context "math()"
snippet lr[] "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:i=1}}^{${2:n}} ${3:a_n z^n}
endsnippet

context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

# context "math()"
# snippet rd "to the ... power" iA
# ^{($1)}$0
# endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
~~\exists~ $0
endsnippet

context "math()"
snippet VV "forall" iA
~\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet


context "math()"
snippet st "such that"
~~s.t~~
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet


context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

# context "math()"
# snippet xx "cross" iA
# \times 
# endsnippet

priority 100
context "math()"
snippet ** "^*" iA
^*$0
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|tanh|arctan|sinh|cosh)' "ln" rwA
\\`!p snip.rv = match.group(1)`($1)$0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 100
context "math()"
snippet <- "\leftarrow" i
\leftarrow $0 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" w
\\{$1\\} $0
endsnippet


context "math()"
snippet cc "subset" iA
\subset 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

context "math()"
snippet uu "cup" iA
\cup 
endsnippet

context "math()"
snippet UU "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet RR "R" iA
\mathbb{R}
endsnippet

context "math()"
snippet NN "N" iA
\mathbb{N}
endsnippet

context "math()"
snippet QQ "Q" iA
\mathbb{Q}
endsnippet

context "math()"
snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

context "math()"
snippet CC "C" iA
\mathbb{C}
endsnippet

context "math()"
snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet <> "\langle \rangle" iA
\langle $1 \rangle $0
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet HH "H" iA
\mathbb{H}
endsnippet

context "math()"
snippet mcal "\mathcal{}" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet mbb "\mathbb{}" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet AA "\mathcal{A}" iA
\mathcal{A}
endsnippet

context "math()"
snippet BB "\mathcal{B}" iA
\mathcal{B}
endsnippet

context "math()"
snippet DD "\mathcal{D}" iA
\mathcal{D}
endsnippet

context "math()"
snippet PP "\mathcal{P}" iA
\mathcal{P}
endsnippet

context "math()"
snippet GG "\mathcal{G}" iA
\mathcal{G}
endsnippet

context "math()"
snippet text "\text{}" iA
\text{${1:${VISUAL}}}$0
endsnippet

snippet ali "Smart \align" bA
\begin{align*}
	${0: `!p 
txt = snip.v.text.strip()
txt = txt.replace("\[\n", "")
txt = txt.replace("\]", "")
txt = txt.replace(" =", " &= ")
txt = txt.replace("\n", "\\\\ \n")
snip.rv = txt
`}
\end{align*}
endsnippet

snippet a= "&=" A
&=
endsnippet

context "math()"
snippet vv "Visual smart vectors" bA
${0: `!p snip.rv = smart_matrix(snip.v.text)`}
endsnippet

priority 1000
context "math()"
snippet '^.*[\)\]\}\|]m' "Auto smart vector" wrA
`!p
txt = match.string[:-1]
snip.rv = smart_matrix(txt)
`
endsnippet

snippet href "\href{}{}" iw
\href{$1}{$2}$0
endsnippet


snippet note "bf note" bA
\textbf{Note:} $0
endsnippet

snippet remark "bf remark" bA
\textbf{Remark:} $0
endsnippet


context "math()"
snippet argmin "\arg\min_{}" iwA
\arg\min_{$1}$0
endsnippet

context "math()"
snippet argmax "\arg\max_{}" iwA
\arg\max_{$1}$0
endsnippet

context "math()"
snippet ll "\arg\min_{}" iw
\ell$0
endsnippet

context "math()"
snippet xx "\bm{x}" iwA
\bm{x}$0
endsnippet

context "math()"
snippet ^th "^{\text{th}}" i
^{\text{th}}$0
endsnippet

snippet p "description" 
\[
\frac{\partial z_i}{\partial z_m} = \sum_{j \in \text{out}(m) } \frac{\partial z_j}{\partial z_m} \frac{\partial z_i}{\partial z_j} 
.\] 
endsnippet

snippet sigalg "sigma algebra" 
$\sigma$-algebra$0
endsnippet

snippet NOT "bf NOT" i
\textbf{NOT}$0
endsnippet

context "math()"
snippet tilde "\tilde{}" iA
\tilde{$1}$0
endsnippet

context "math()"
snippet TT "^T" iA
^T$0
endsnippet

context "math()"
snippet under "\underbrace{}_{}" i
\underbrace{${1:${VISUAL}}}_{${2:\text{$3}}}$0
endsnippet

context "math()"
snippet times "\times" iA
\times$0
endsnippet


context "math()"
snippet over "overline" iA
\overline{$1}$0
endsnippet

context "math()"
snippet 2norm "2norm" iA
||$1||_2$0
endsnippet

context "math()"
snippet supr "supremum" iA
\sup_{$1}$0
endsnippet

context "math()"
snippet += "plus equals" iA
\mathrel{+}=
endsnippet

context "math()"
snippet *= "times equals" iA
\mathrel{*}=
endsnippet
